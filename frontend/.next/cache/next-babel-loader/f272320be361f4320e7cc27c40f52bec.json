{"ast":null,"code":"import fetch from \"isomorphic-fetch\";\nimport { API } from \"../config\";\nimport cookie from \"js-cookie\";\nexport const signup = user => {\n  return fetch(`${API}/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const signin = user => {\n  return fetch(`${API}/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => {\n    console.log(err);\n  });\n}; // set cookie\n\nexport const setCookie = (key, value) => {\n  // client side\n  if (false) {\n    cookie.set(key, value, {\n      expires: 1\n    });\n  }\n};\nexport const removeCookie = key => {\n  // client side\n  if (false) {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n}; // get cookie\n\nexport const getCookie = key => {\n  // client side\n  if (false) {\n    cookie.get(key);\n  }\n}; // localstorage\n\nexport const setLocalStorage = (key, value) => {\n  if (false) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n};\nexport const removeLocalStorage = key => {\n  if (false) {\n    localStorage.removeItem(key);\n  }\n}; //authenticate user by passing data to cookie and localstorage\n\nexport const authenticate = (data, next) => {\n  setCookie(\"token\", data.token);\n  setLocalStorage(\"user\", data.user);\n  next();\n};\nexport const isAuth = () => {\n  if (false) {\n    const cookieChecked = getCookie(\"token\");\n\n    if (cookieChecked) {\n      if (localStorage.getItem(\"user\")) {\n        return JSON.parse(localStorage.getItem(\"user\"));\n      } else {\n        return false;\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Administrator/Documents/GitHub/SEO-Blog/frontend/actions/auth.js"],"names":["fetch","API","cookie","signup","user","method","headers","Accept","body","JSON","stringify","then","response","json","catch","err","console","log","signin","setCookie","key","value","set","expires","removeCookie","remove","getCookie","get","setLocalStorage","localStorage","setItem","removeLocalStorage","removeItem","authenticate","data","next","token","isAuth","cookieChecked","getItem","parse"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-fetch\";\r\nimport { API } from \"../config\";\r\nimport cookie from \"js-cookie\";\r\n\r\nexport const signup = user => {\r\n  return fetch(`${API}/signup`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(user)\r\n  })\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const signin = user => {\r\n  return fetch(`${API}/signin`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(user)\r\n  })\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\n// set cookie\r\n\r\nexport const setCookie = (key, value) => {\r\n  // client side\r\n  if (process.browser) {\r\n    cookie.set(key, value, {\r\n      expires: 1\r\n    });\r\n  }\r\n};\r\n\r\nexport const removeCookie = key => {\r\n  // client side\r\n  if (process.browser) {\r\n    cookie.remove(key, {\r\n      expires: 1\r\n    });\r\n  }\r\n};\r\n\r\n// get cookie\r\n\r\nexport const getCookie = key => {\r\n  // client side\r\n  if (process.browser) {\r\n    cookie.get(key);\r\n  }\r\n};\r\n\r\n// localstorage\r\n\r\nexport const setLocalStorage = (key, value) => {\r\n  if (process.browser) {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  }\r\n};\r\n\r\nexport const removeLocalStorage = key => {\r\n  if (process.browser) {\r\n    localStorage.removeItem(key);\r\n  }\r\n};\r\n\r\n//authenticate user by passing data to cookie and localstorage\r\n\r\nexport const authenticate = (data, next) => {\r\n  setCookie(\"token\", data.token);\r\n  setLocalStorage(\"user\", data.user);\r\n  next();\r\n};\r\n\r\nexport const isAuth = () => {\r\n  if (process.browser) {\r\n    const cookieChecked = getCookie(\"token\");\r\n    if (cookieChecked) {\r\n      if (localStorage.getItem(\"user\")) {\r\n        return JSON.parse(localStorage.getItem(\"user\"));\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}